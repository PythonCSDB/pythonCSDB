Jupyter Notebook
Binomial_Lattice_Calls_Puts
(unsaved changes)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help

Binomial lattice Program
​
​
import numpy as np
from math import exp, sqrt, log
s0 = 20; strike = 20;tp = 1.0;rf = 0.06;q= 0.04;sigma = 0.30;nperiods = 3
Ocall = True; Otype = 'E'
def make_stuff(tp,nperiods, sigma, rf, q):
    dt= tp/nperiods
    u = exp(sigma*sqrt(dt))
    d = 1/u
    disc = exp(-rf*dt)
    p = (exp((rf-q)*dt) -d)/(u-d)
    pbar = 1-p
    return u, d, p, pbar, disc
​
u, d, p, pbar, disc = make_stuff(tp,nperiods, sigma, rf, q)
print(u, d, p, disc)
def make_stock_lattice(s0, u, d, nperiods):
    S = np.zeros((nperiods+1, nperiods+1))
    S[0,0] = s0
    for t in range(1, nperiods+1):
        S[0,t] = S[0, t-1]*u
        S[t,t] = S[t-1, t-1]*d
        
    for t in range(2, nperiods+1):
        for j in  range(1, t):
            S[j,t] = S[j-1, t]*d**2
    return S
S= make_stock_lattice(s0, u, d, nperiods)
print(S)        
def make_option_lattice(S, strike, nperiods, p, pbar, disc, Otype = 'E', Ocall= True):
    C = np.zeros((nperiods+1, nperiods+1))
    # Get Boundary Values
    for j in range(0, nperiods+1):
        C[j, nperiods] = max(0, S[j, nperiods]- strike)
        if (Ocall == False):
            C[j, nperiods] = max(0, strike- S[j, nperiods])
        
    for t in range(nperiods-1, -1, -1):
        for j in range(0, t+1):
            C[j,t] = disc*(p*C[j, t+1]+ pbar*C[j+1, t+1])
            if (Otype == 'A' and Ocall == True):
                C[j,t] = max(C[j,t], S[j,t]-strike)
            if (Otype == 'A' and Ocall == False):
                    C[j, t] = max(C[j,t], strike-S[j,t])
            
    return C
Otype = 'E'; Ocall = True
C = make_option_lattice(S, strike, nperiods, p, pbar, disc, Otype, Ocall)
print(np.round(C,2))
    
def option_price(s0, strike, tp, rf, q, sigma, nperiods, Otype='E', Ocall= True):
    #Step1:
    u, d,p, pbar, disc = make_stuff(tp,nperiods, sigma, rf, q)
    #Step 2
    S = make_stock_lattice(s0, u, d, nperiods)
    #Step 3
    C = make_option_lattice(S, strike, nperiods, p, pbar, disc, Otype, Ocall)
    return C[0,0]
​
​
mycall = option_price(s0, strike, tp, rf, q, sigma, nperiods, Otype, Ocall)
print(mycall)
def get_all_options(s0, strike, tp, rf, q, sigma, nperiods):
    EC = option_price(s0, strike, tp, rf, q, sigma, nperiods, 'E', True)
    AC = option_price(s0, strike, tp, rf, q, sigma, nperiods, 'A', True)
    EP = option_price(s0, strike, tp, rf, q, sigma, nperiods, 'E', False)
    AP = option_price(s0, strike, tp, rf, q, sigma, nperiods, 'A' , False)
    return(EC, AC, EP, AP)
​
ans = get_all_options(s0, strike, tp, rf, q, sigma, nperiods)
print('The price of an European call is  ', round(ans[0],3))
print('The price of an  American call is ', round(ans[1],3),'\n')
print('The price  of an European put is  ', round(ans[2],3))
print('The price of an American put is   ', round(ans[3],3))
def sensitivity_nperiods(s0, strike, tp, rf, q, sigma):
    mylist = np.arange(2,100)
    n = len(mylist)
    myoptions = np.zeros(n)
    for i, nperiods in enumerate(mylist):
        myoptions[i] = option_price(s0, strike, tp, rf, q, sigma, nperiods)
    return mylist, myoptions
​
mylist, myoptions =  sensitivity_nperiods(s0, strike, tp, rf, q, sigma)       
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(mylist, myoptions)
​


********************************



Jupyter Notebook
Bi_Trinomial_OPtions
(unsaved changes)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help

import numpy as np
from math import sqrt, exp, sqrt
 s = 100.0; strike = 100.0; tp = 5.0; rf= 0.06; q = 0.05; sigma = 0.30; nperiods= 3; lam = 1.0  
def make_stuff(t, nperiods, rf, q, sigma):
    dt = t/nperiods
    disc = exp(-rf*dt)
    u = exp(sigma*sqrt(dt)); d = 1/u
    p = (exp((rf-q)*dt) - d)/(u-d); pbar = 1-p
    return u, d, p, pbar, dt, disc
​
u, d, p, pbar, dt, disc = make_stuff(tp, nperiods, rf, q, sigma)
def make_stock_lattice(s0, u, d, nperiods):
    S = np.zeros((nperiods+1, nperiods+1))
    S[0,0]= s0
    for i in range(1, nperiods+1):
        S[0,i] = S[0, i-1]*u
        S[i, i] = S[i-1,i-1]*d
    for t in range(2, nperiods+1):
        for j in range(1,t):
            S[j,t] = S[j-1, t]*d**2
    return S
​
S = make_stock(s, u, d,nperiods)
print(S)
def make_option_lattice(S, nperiods, p, pbar,disc):
    C = np.zeros((nperiods+1, nperiods+1))
    # make the Boundary values
    for j in range(nperiods+1):
        C[j, nperiods]= max(S[j,nperiods]-strike, 0.0)
    for t in range(nperiods-1, -1, -1):
        for j in range(0, t+1):
            C[j,t] = disc*(p*C[j, t+1]+ pbar*C[j+1, t+1])
    return C
​
C = make_option_lattice(S, nperiods, p, pbar, disc)
print(C)
def mylattice(s, strike, tp, rf, q, sigma, nperiods):
    # Step 1: set up all the information
    u, d, p, pbar, dt, disc = make_stuff(tp, nperiods, rf, q, sigma)
    
    
    # Step 2: make a stock price lattice:
    S = make_stock_lattice(s, u, d, nperiods)
    
    
    # Step 3: Make option price lattice:
    C = make_option_lattice(S, nperiods, p, pbar, disc)
    
    # Step 4
    return C[0,0]
    
ans = mylattice(s, strike, tp, rf, q, sigma, nperiods)
print(ans)
def sensitivity_nperiods(s, strike, tp, rf, q, sigma):
    myL = np.arange(3, 50, 1)
    n = len(myL)
    options = np.zeros(n)
    for i, nperiods  in enumerate(myL):
        options[i] = mylattice(s, strike, t, rf, q, sigma, nperiods)
    return myL, options
myL, options = sensitivity_nperiods(s, strike, t, rf, q, sigma)   
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(myL, options)
def trinomial_stock(s,strike, tp, rf, q, sigma, nperiods, lam):
    dt = tp/nperiods
    #print(s, strike, tp, rf, q, sigma, nperiods, lam)
    
    u = exp(lam*sigma*sqrt(dt))
    m = 1.0
    d = exp(-lam*sigma*sqrt(dt))
    
    S = np.zeros((2*nperiods+1, nperiods+1))
    S[0,0] = s 
    # 
    for t in range(1, nperiods+1):
        S[0, t] = S[0, t-1]*u
        S[2*t, t]= S[2*(t-1), t-1]*d
    for t in range(1, nperiods+1):
        for j in range(1, 2*t +1):
            S[j, t] = S[j-1, t]*d
    return S
​
S = trinomial_stock(s,strike, tp, rf, q, sigma, nperiods, lam)
print(np.round(S,2) )     
def trinomial_option(s, strike, tp, rf, q, sigma, nperiods, lam):
    #print(s, strike, tp, rf, q, sigma, nperiods, lam)
    S  = trinomial_stock(s,strike, tp, rf, q, sigma, nperiods, lam)
    #print(S)
    #print('after stock', s, strike, tp, rf, q, sigma, nperiods, lam)
    dt = tp/nperiods
    mu = rf-q - sigma**2/2.0
    pu = 1/(2*lam**2) + mu*sqrt(dt)/(2*lam*sigma)
    pd = 1/(2*lam**2) - mu*sqrt(dt)/(2*lam*sigma)
    pm = 1- 1/lam**2
    #print(pu, pm, pd, pu+pm+pd)
    disc = exp(-rf*dt)
    C = np.zeros((2*nperiods+1, nperiods+1))
    # Setup bndry value
    for j in range(0, 2*nperiods +  1):
        C[j, nperiods] = max(S[j, nperiods]-strike, 0.0)
    # Do recursion 
    for t in range(nperiods-1, -1, -1):
         for j in range(0, 2*t+ 1):
                C[j, t] = disc*(pu*C[j, t+1]+ pm*C[j+1, t+1] +pd*C[j+2, t+1])
                
    return C[0,0]
​
C = trinomial_option(s, strike, t, rf, q, sigma, nperiods, lam) 
print(np.round(C,2))                   
​
def sensitivity_nperiods2(s, strike, tp, rf, q, sigma, lam):
    myL = np.arange(3, 50, 1)
    n = len(myL)
    optionsB = np.zeros(n)
    optionsT = np.zeros(n)
    for i, nper  in enumerate(myL):
        #print(s, strike, tp, rf, q, sigma, nper)
        optionsB[i] = mylattice(s, strike, tp, rf, q, sigma, nper)
        optionsT[i] = trinomial_option(s, strike, tp, rf, q, sigma, nper, lam) 
        
    return myL, optionsB, optionsT
lam = 1.2
myL, optionsB, optionsT = sensitivity_nperiods2(s, strike, tp, rf, q, sigma, lam )   
plt.plot(myL, optionsB)
plt.plot(myL, optionsT)
​
